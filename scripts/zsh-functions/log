sanitize_command_name() {
	local cmd="$1"
	cmd="${cmd// /_}"              # Replace spaces with underscores
	cmd="${cmd//\//-}"             # Replace slashes with dashes
	cmd="${cmd//[^a-zA-Z0-9._-]/}" # Remove any characters that aren't alphanumeric, `.` `_` or `-`
	echo "$cmd"
}

logrun() {
	local timestamp
	timestamp=$(date +"%Y-%m-%d_%H-%M-%S") # Assign separately

	local cmd_name
	cmd_name=$(sanitize_command_name "$1") # Use helper function
	local args=("${@:2}")                  # Captures all arguments as an array
	local safe_args="${args[*]// /_}"      # Replace spaces with underscores
	safe_args="${safe_args//\//-}"         # Replace slashes with dashes

	# Truncate if args are too long
	if [[ ${#safe_args} -gt 50 ]]; then
		safe_args="${safe_args:0:50}_..."
	fi

	local logdir="./logs"
	mkdir -p "$logdir" # Ensure logs directory exists

	local logfile="${logdir}/${cmd_name}_${safe_args}_${timestamp}.log"

	# Log the executed command for reference
	echo "Running: ${cmd_name} ${args[*]}" | tee "$logfile"
	echo "------------------------" >>"$logfile"
	# Run the command and redirect both stdout and stderr to the log file
	"${cmd_name}" "${args[@]}" &>>"$logfile"

	echo "Log saved to $logfile"
}

logclear() {
	local logdir="./logs"
	[[ -d "$logdir" ]] || {
		echo "Log directory does not exist: $logdir"
		return 1
	}

	local pattern=""
	local older_than=""
	local today_hour=""
	local matching_logs=()

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-d | --day)
			if [[ "$2" == "today" ]]; then
				pattern="$(date +"%Y-%m-%d")"
			else
				pattern="$2"
			fi
			shift 2
			;;
		-h | --hour)
			if [[ "$2" == "now" ]]; then
				pattern="$(date +"%Y-%m-%d_%H")"
			else
				pattern="$(date +"%Y-%m-%d")_$2"
			fi
			shift 2
			;;
		-c | --command)
			pattern="$(sanitize_command_name "$2")" # Use helper function
			shift 2
			;;
		-o | --older-than)
			if [[ "$2" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
				older_than="$2"
			else
				echo "Invalid date format. Use YYYY-MM-DD."
				return 1
			fi
			shift 2
			;;
		-t | --today-hour)
			if [[ "$2" =~ ^[0-9]{1,2}$ && "$2" -ge 0 && "$2" -le 23 ]]; then
				today_hour="$2"
			else
				echo "Invalid hour format. Use 0-23."
				return 1
			fi
			shift 2
			;;
		*)
			echo "Usage: clearlogs [-d YYYY-MM-DD | -d today] [-h HH | -h now] [-c command] [-o YYYY-MM-DD] [-t HH]"
			return 1
			;;
		esac
	done

	# Loop through files safely
	for file in "$logdir"/*; do
		[[ -f "$file" ]] || continue # Skip non-files (e.g., if no matching logs)

		if [[ -n "$older_than" ]]; then
			log_date=$(echo "$file" | grep -oE '\d{4}-\d{2}-\d{2}')
			if [[ -n "$log_date" && "$log_date" < "$older_than" ]]; then
				matching_logs+=("$file")
			fi
		elif [[ -n "$today_hour" ]]; then
			today_date="$(date +"%Y-%m-%d")"
			if [[ "$file" =~ ${today_date}_[0-9]{2} ]]; then
				log_hr="${file:${#today_date}+1:2}" # Extract HH part from filename
				if [[ "$log_hr" -le "$today_hour" ]]; then
					matching_logs+=("$file")
				fi
			fi
		elif [[ -n "$pattern" && "$file" == *"$pattern"* ]]; then
			matching_logs+=("$file")
		fi
	done

	if [[ ${#matching_logs[@]} -eq 0 ]]; then
		echo "No matching logs found."
		return 0
	fi

	echo "Deleting ${#matching_logs[@]} logs matching: $pattern $older_than $today_hour"
	rm -v -- "${matching_logs[@]}"
}